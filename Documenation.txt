Design & Implementation

	My goal was to have a few helper functions and functions dedicated to each thread, which includes the main thread, log thread, and worker threads. For my helper functions, I have separate functions that add to the socket queue and log queue, separate functions that remove from the socket and log queue, and a check dictionary function that will determine whether a word is in the stored dictionary. Loading the dictionary was implemented as a separate function, which simply loads a predetermined string array that is globally accessible. A major thing that helped in my design was having structures dedicated to all the variables that would need mutual exclusion for logging and for sockets. In the main thread, I initialized all of my variables and established the connection to the server. Then, the main function is on a constant loop waiting for connection requests. When one is received, the socket descriptor is added to the socket queue. Each time the mutual exclusion variables are accessed, the lock is acquired by the thread. It then adds to the queue, releases the lock and signals that something was added to the queue in case other threads were waiting to remove from said queue. If we are removing from the queue and the queue is empty, the thread waits for a signal that something was added to the queue, then it removes from the queue and signals that a spot is now empty in case a thread is waiting to add to the queue. This is how mutual exclusion works in my program.

Testing
     Because I am using the program through putty, It took multiple attempts to find and connect to the same putty server. If the same server number isn't available, the thread can't connect to the main host and no connection is established. To actually connect, I had to use the netcat command ‘nc 127.0.0.1’ and my designated port number.  Once the connection is finally established, the server also connects to the dictionary file to then check if the user's input words are correct. If correct, the main server returns with either ‘Word Correct’ or ‘Not Found’ and logs the word and whether it was correct or not.
